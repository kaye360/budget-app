---
import { BanknoteArrowUpIcon, ImportIcon } from "@lucide/astro";
import LoadingButton from "../../components/Button/LoadingButton.astro";
import Layout from "../../layouts/Layout.astro";
import CreateTransaction from "./_components/CreateTransaction.astro";
import CreateTransactionCount from "./_components/CreateTransactionCount.astro";
---

<Layout>

    <div class="flex items-center justify-between mb-6">
        <h3 class="sm:col-span-2 text-lg font-semibold tracking-wide mb-4">
            Add Transactions
        </h3>
        <div class="flex items-stretch gap-2">
            <CreateTransactionCount />
            <button class="flex items-center gap-1 border border-red/60 rounded-md px-2 py-1 cursor-pointer">
                Import
                <ImportIcon />
            </button>
        </div>
    </div>

    <form>

        <transaction-create-list class="grid gap-4">
            <CreateTransaction />
        </transaction-create-list>

        <template id="transaction-create">
            <CreateTransaction />
        </template>

        <div class="sm:col-span-2 grid grid-cols-2 gap-4">
            <LoadingButton 
                state={{ initial : 'Save', loading : 'Saving...', error : ' Failed', success : 'Saved!' }}
                variant="fill" 
                Icon={BanknoteArrowUpIcon} 
                type="submit"
                class="w-full"
            >
            </LoadingButton>
        </div>
    </form>

</Layout>


<script>
import { el } from "../../utils/El"
import { fetchData } from "../../utils/Fetch"

document.addEventListener('astro:page-load', () => {

    const form = el<HTMLFormElement>('form')
    form?.addEventListener('submit', handleSubmit)


    async function handleSubmit( e: SubmitEvent ) {
        e.preventDefault()
        
        const form = el<HTMLFormElement>('form')

        if( !form ) {
            console.warn('invalid form element')
            return
        }

        const formData = new FormData(form)

        const transactions = Object.fromEntries( formData.entries() )

        const created = await fetchData('/api/transactions', {
            method : 'POST',
            body : transactions
        })
    }

})

</script>