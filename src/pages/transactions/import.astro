---
import { ImportIcon } from "@lucide/astro";
import H1 from "../../components/H1.astro";
import Layout from "../../layouts/Layout.astro";
import LoadingButton from "../../components/Button/LoadingButton.astro";
import ImportTransactions from "../../components/_transactions/ImportTransactions.astro";
---

<Layout>

    <div class="flex items-center justify-between mb-6">
        <H1>
            Import Transactions
        </H1>
    </div>

    <ImportTransactions />

    <form
        id="import-transactions-form"
        class="grid gap-2"
        method="POST"
    >
        Imported Transactions
        <textarea 
            name="transactions" 
        />

        <label class="lg:max-w-1/2">
            Bank Account:
            <select name="account">
                <option value="rbc">RBC</option>
                <option value="cibc">CIBC</option>
            </select>
        </label>

        <LoadingButton 
            state={{
                initial : 'Import Transactions',
                loading : 'Importing...',
                error : 'Import Failed',
                success : 'Transactions Imported'
            }}
            Icon={ImportIcon}
            variant="fill"
            class="w-full lg:max-w-1/2"
            type="submit"
        />
    </form>

</Layout>

<script>
import { actions } from "astro:actions";
import { el } from "../../lib/el";
import { csvToTransactions } from "../../utils/transactions/csvToTransactions";
import { formDataToCsv } from "../../utils/transactions/formDataToCsv";


el<HTMLFormElement>('#import-transactions-form', document, form => {
    form.addEventListener('submit', async (e: Event) => {
        e.preventDefault()

        const loadingButton = el('loading-button')
        loadingButton?.setAttribute('state', 'loading')

        const { transactions, account } = formDataToCsv(form)
        const createTransactions = csvToTransactions(transactions, account)

        const { error } = await actions.transaction.store(createTransactions)

        if( error ) {
            loadingButton?.setAttribute('state', 'error')
            throw new Error(error.message)
        }

        loadingButton?.setAttribute('state', 'success')
    })
})

</script>