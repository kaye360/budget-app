---
import { Trash2Icon } from "@lucide/astro";
import Button from "../../../components/Button/Button.astro";
---

<transaction-create class="grid sm:grid-cols-2 gap-4 border-l border-blue pl-4 mb-12">

    <label>
        Date: <br />
        <input type="date" name="date-0" data-name="date" />
    </label>

    <label>
        Description: <br />
        <input type="text" name="description-0" data-name="description" />
    </label>

    <label>
        Amount: <br />
        <input type="text" name="amount-0" data-name="amount" />
    </label>

    <label>
        Budget: <br />
        <select name="budget" data-name="budget-0" class="w-full">
            <option selected value="budget-1">budget 1</option>
            <option value="budget-2">budget 2</option>
        </select>
    </label>

    <label>
        Account: <br />
        <select name="account-name" data-name="account-name-0" class="w-full">
            <option value="account-1">account 1</option>
            <option selected value="account-2">account 2</option>
        </select>
    </label>

    <div class="md:text-right">
        <Button variant="ghost" type="button" class="h-full w-fit flex items-end gap-1 ml-auto text-sm hover:underline">
            Remove
            <Trash2Icon width="20" height="20" stroke-width={2} />
        </Button>
    </div>

</transaction-create>


<script>
import Qry from "../../../utils/Qry"

class TransactionCreate extends HTMLElement {
    
    connectedCallback() {
        Qry.one<HTMLFormElement>('form', this)?.addEventListener('submit', this.handleSubmit)
    }

    handleSubmit = async (e: Event) => {
        e.preventDefault()
        const form = e.target
        const submitLoadingButton = Qry.one<HTMLButtonElement>('loading-button', this)

        if( !(form instanceof HTMLFormElement)) {
            return 
        }

        submitLoadingButton?.setAttribute('state', 'loading')

        const formData = new FormData(form)

        const updatedTransaction = {
            id : form.closest('transaction-item')?.id,
            date : formData.get('date'),
            description : formData.get('description'),
            amount : formData.get('amount'),
            budget : formData.get('budget'),
            accountName : formData.get('account-name'),
        }

        const result = await this.updateTransaction(updatedTransaction)

        if( result.error ) {
            submitLoadingButton?.setAttribute('state', 'error')
            console.warn('Error updating transaction', result.error)
            return 
        }
        
        const transaction = form.closest('transaction-item')
        
        transaction?.setAttribute('amount', String(formData.get('amount')) )
        transaction?.setAttribute('date', String(formData.get('date')) )
        transaction?.setAttribute('description', String(formData.get('description')) )
        transaction?.setAttribute('budget', String(formData.get('budget')) )

        submitLoadingButton?.setAttribute('state', 'success')
    }

    updateTransaction = async (updatedTransaction: object) => {

        try{
            const res = await fetch('/transactions/api/update', {
                method : 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updatedTransaction)
            })
            const json = await res.json()
            return json
        } catch (e) {
            return { error : e}
        }
    }

}

customElements.define('transaction-create', TransactionCreate)
</script>