---
import { BanIcon, SaveIcon } from "@lucide/astro";
import Button from "../../../components/Button/Button.astro";
import LoadingButton from "../../../components/Button/LoadingButton.astro";
import type { Budget, Transaction } from "../../../types/types";

interface Props {
    budgets : Budget[],
    transaction? : Transaction
}

const { budgets, transaction } = Astro.props
---

<transaction-edit>

    <form class="grid sm:grid-cols-2 gap-4 border-l border-blue pl-4 mb-12" autocomplete="off">

        <h3 class="sm:col-span-2 text-lg font-semibold tracking-wide">
            Edit Transaction
        </h3>

        <label>
            Date: <br />
            <input type="date" name="date" />
        </label>

        <label>
            Description: <br />
            <input type="text" name="description" />
        </label>

        <label>
            Amount: <br />
            <input type="text" name="amount" />
        </label>

        <label>
            Budget: <br />
            <select name="budget" class="w-full bg-bg-2" data-budgetid={transaction?.budgetId}>
                <option value="0">Uncategorized</option>
                { budgets.map( budget => (
                    <option 
                        value={budget.id}
                    >
                        {budget.name}
                    </option>
                ))}
            </select>
        </label>

        <label>
            Account: <br />
            <select name="account-name" class="w-full bg-bg-2">
                <option value="account-1">account 1</option>
                <option selected value="account-2">account 2</option>
            </select>
        </label>

        <div class="sm:col-span-2 grid grid-cols-2 gap-4">
            <close-modal-button>
                <Button variant="outline" Icon={BanIcon} type="button" class="w-full block">
                    Cancel
                </Button>
            </close-modal-button>
            <LoadingButton 
                state={{ initial : 'Save', loading : 'Saving...', error : ' Failed', success : 'Saved!' }}
                variant="fill" 
                Icon={SaveIcon} 
                type="submit"
                class="w-full"
            >
            </LoadingButton>
        </div>

    </form>
</transaction-edit>


<script>
import { el } from "../../../lib/el"
import { fetchData } from "../../../lib/fetch"


class TransactionEdit extends HTMLElement {
    
    /**
     * 
     * Edits a transaction and updates DOM
     * 
     */
    connectedCallback() {

        /**
         * Chang budget select default value to transaction budget
         */
        el<HTMLSelectElement>('select[name="budget"', this, select => {
            const budgetId = select.dataset.budgetid
            select.setAttribute('value', budgetId || '0')
        })

        /**
         * Form submit handler
         */
        el<HTMLFormElement>('form', this, form => {
            form.addEventListener('submit', async (e: Event) => {
        
                e.preventDefault()

                const button = el<HTMLButtonElement>('loading-button', this)
                const transaction = form.closest('transaction-item')
                
                if( !(form instanceof HTMLFormElement) || !transaction ) return 

                button?.setAttribute('state', 'loading')

                const formData = new FormData(form)
                const updatedTransaction = this.getUpdatedTransaction(formData)

                const result = await fetchData(`/api/transactions/${transaction.id}`, {
                    method : 'PUT',
                    body: updatedTransaction
                })

                if( result.error ) {
                    button?.setAttribute('state', 'error')
                    return 
                }
                
                this.updateTransaction( transaction, formData ) 
                button?.setAttribute('state', 'success')
            })
        })
    }


    getUpdatedTransaction( formData: FormData ) {
        return {
            date : formData.get('date'),
            description : formData.get('description'),
            amount : Number(formData.get('amount')),
            budget : formData.get('budget'),
            accountName : formData.get('account-name'),
        }
    }


    updateTransaction( transaction : Element | null, formData: FormData) {
        transaction?.setAttribute('amount', String(formData.get('amount')) )
        transaction?.setAttribute('date', String(formData.get('date')) )
        transaction?.setAttribute('description', String(formData.get('description')) )
        transaction?.setAttribute('budget', String(formData.get('budget')) )
    }
}

customElements.define('transaction-edit', TransactionEdit)
</script>