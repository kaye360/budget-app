---
import { EllipsisVerticalIcon } from "@lucide/astro"
import type { Transaction } from "../../../types/Transaction"
import TransactionModal from "./TransactionModal.astro"

interface Props {
    transaction? : Transaction,
    mode? : 'simple' | 'detailed'
}

const { 
    transaction,
    mode = 'detailed'
}= Astro.props
---

<transaction-item 
    data-isdeleted={transaction?.isDeleted}
    class="relative flex items-center pb-6 border-b border-red/20  data-[isdeleted=true]:hidden transition-all max-h-[500px]"
    {...transaction}
>

    <transaction-info>

        <transaction-date  
            class="block text-sm text-accent-text mb-1 border border-transparent rounded" 
        />

        <transaction-description 
            class="block font-semibold text-lg mb-2 border border-transparent data-[iseditable=true]:hover:border-slate-300 rounded" 
        />

        <transaction-budget      class="bg-blue text-black inline-block px-3 py-1 text-sm font-semibold rounded-xl tracking-wide first-letter:uppercase" />

        { mode === 'detailed' &&
            <span class="block sm:inline-block mt-3 sm:mt-auto sm:ml-2 text-sm text-accent-text tracking-wide capitalize">
                <transaction-account-name />
                &#9679;
                <transaction-account-type />
                <transaction-account-number />
            </span>
        }

    </transaction-info>

    <transaction-amount  
        class="ml-auto text-2xl font-semibold font-theme border border-transparent data-[iseditable=true]:hover:border-slate-300 rounded" 
    />

    { mode === 'detailed' && 
        <transaction-edit>
            <button class="p-2 ml-2 border border-red/30 group hover:border-slate-500 rounded-lg cursor-pointer transition-colors active:scale-95">
                <EllipsisVerticalIcon class="stroke-slate-400 group-hover:stroke-slate-500 transition-colors" />
            </button>
        </transaction-edit>
        <TransactionModal />
    }
</transaction-item>


<script>
import { el } from "../../../utils/El"
import { toCurrency, toDateWithYear } from "../../../utils/utils"

class TransactionItem extends HTMLElement {
    
    connectedCallback() {
        const editButton = el<HTMLButtonElement>('transaction-edit button', this)
        const dialog = el<HTMLDialogElement>('dialog', this)
        
        if( editButton && dialog ) {
            editButton.addEventListener('click', () => dialog.showModal() )
        }
    }

    static observedAttributes = ['date', 'description', 'budget', 'amount', 'accountname', 'accounttype', 'accountnumber', 'isdeleted']

    attributeChangedCallback(name: string, _: any, newValue:string) {
        const handlers: Record<string, () => void> = {
            date : () => {
                el('transaction-date', this, el => el.textContent = toDateWithYear(newValue) )
                el<HTMLInputElement>('input[name=date]', this, el => el.value = newValue)
            },
            description : () => {
                el('transaction-description', this, el => el.textContent = newValue )
                el<HTMLInputElement>( 'input[name=description]', this, el => el.value = newValue ) 
            },
            budget : () => {
                el('transaction-budget', this, el => el.textContent = newValue )
                el<HTMLInputElement>('select[name=budget]', this, el => el.value = newValue )
            },
            amount : () => {
                el( 'transaction-amount', this, el => el.textContent = toCurrency(newValue) )
                el( 'input[name=amount]', this, el => el.textContent = toCurrency(newValue).replace('$', '') )
            },
            accountname : () => {
                el('transaction-account-name', this, el => el.textContent = newValue )
            },
            accounttype : () => {
                el('transaction-account-type', this, el => el.textContent = newValue )
            },
            accountnumber : () => {
                el('transaction-account-number', this, el => el.textContent = newValue )
            },
        }
        if( handlers[name] ) {
            handlers[name]()
        }
    }
}
customElements.define('transaction-item', TransactionItem)

// if( import.meta.env.DEV ) {
//     document.addEventListener('astro:page-load', () => {
//         setTimeout( () => {
//             const dialog = document.querySelectorAll('dialog')
//             dialog[1]?.showModal()
//         }, 1000)
//     })
// }
</script>

