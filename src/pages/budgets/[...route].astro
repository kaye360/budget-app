---
import Layout from "../../layouts/Layout.astro";
import Budget from "../../components/_budgets/Budget.astro"
import { getAllBudgetTotalSpent, getBudgetsWithTotalSpent } from "../../utils/budget.utils";
import { fetchData } from "../../lib/fetch";
import type { GetBudgets, MonthlyTransactions } from "../../types/types";
import { convertDate } from "../../lib/convertDate";
import Button from "../../components/Button/Button.astro";
import { ChartPieIcon, CirclePlusIcon } from "@lucide/astro";
import Modal from "../../components/Modal.astro";
import LoadingButton from "../../components/Button/LoadingButton.astro";
import CreateBudget from "../../components/_budgets/CreateBudget.astro";

const auth = await Astro.session?.get('auth')

if( !auth ) {
    return Astro.redirect('/')
}

const { route } = Astro.params;

const month = route ? route : convertDate().to('YYYY-MM')

const [transactions, budgets] = await Promise.all([
	fetchData<MonthlyTransactions>(`/api/transactions/month/${month}`),
	fetchData<GetBudgets>('/api/budgets'),
])

const budgetsWithTotals = getBudgetsWithTotalSpent(
	budgets.response?.data, transactions.response?.data
)

const allBudgetTotals = getAllBudgetTotalSpent(budgetsWithTotals)
---
<Layout>

	<div class="flex items-center justify-between mb-4">

		<h1 class="text-lg md:text-xl font-semibold font-theme min-w-max">
			{ convertDate(month).to('MMMM-YYYY') }
		</h1>

		<select 
			id="month-selector"
			name="month-selector" 
			class="w-fit"
			data-month={month}
		>
			<option>Select month to view</option>
			{ transactions.response?.months.map( month => (
				<option value={month.month}>
					{month.title}
				</option>
			))}
		</select>
		
	</div>

	<div>
		<Budget
			budget={{
				totalSpent : allBudgetTotals.totalSpent,
				percentSpent : allBudgetTotals.percentSpent,
				amount : allBudgetTotals.totalAmount,
				id : 1,
				name : `${ convertDate(month).to('MMMM-YYYY') } Total `,
				userId : 1
			}}
			isTotal
		/>
		<div class="my-6 border-b border-slate-300"/>
	</div>

	<budget-list class="grid gap-6 text-lg w-full">
		{ budgetsWithTotals.map( budget => (
			<Budget {budget} />
		))}
	</budget-list>

	<template id="budget-template">
		<Budget 
			budget={{
				amount : 0,
				id : 0,
				name : '',
				userId : auth.userId,
				totalSpent : 0,
				percentSpent : 0
			}}
		/>
	</template>

	<CreateBudget />

</Layout>
