---
import Layout from "../../layouts/Layout.astro";
import Budget from "../../components/_budgets/Budget.astro"
import { getBudgetsWithTotalSpent } from "../../utils/budget.utils";
import { fetchData } from "../../lib/fetch";
import type { GetBudgets, MonthlyTransactions } from "../../types/types";
import { convertDate } from "../../lib/convertDate";
import CreateBudget from "../../components/_budgets/CreateBudget.astro";
import MonthlyBudget from "../../components/_budgets/MonthlyBudget.astro";
import SelectMonthlyBudget from "../../components/_budgets/SelectMonthlyBudget.astro";

const auth = await Astro.session?.get('auth')

if( !auth ) {
    return Astro.redirect('/')
}

const { route } = Astro.params;

const month = route ? route : convertDate().to('YYYY-MM')

const [transactions, budgets] = await Promise.all([
	fetchData<MonthlyTransactions>(`/api/transactions/month/${month}`),
	fetchData<GetBudgets>('/api/budgets'),
])

const budgetsWithTotals = getBudgetsWithTotalSpent(
	budgets.response?.data, transactions.response?.data
)

---
<Layout>

	<div class="flex items-center justify-between mb-4">

		<h1 class="text-lg md:text-xl font-semibold font-theme min-w-max">
			{ convertDate(month).to('MMMM-YYYY') }
		</h1>

		<SelectMonthlyBudget currentMonth={month} months={transactions.response?.months} /> 
		
	</div>

	<MonthlyBudget name={ `${convertDate(month).to('MMMM-YYYY')} Total Spending` } />

	<budget-list class="grid gap-6 text-lg w-full">
		{ budgetsWithTotals.map( budget => (
			<Budget {budget} />
		))}
	</budget-list>

	<template id="budget-template">
		<Budget 
			budget={{
				amount : 0,
				id : 0,
				name : '',
				userId : auth.userId,
				totalSpent : 0,
				percentSpent : 0
			}}
		/>
	</template>

	<CreateBudget />

</Layout>
