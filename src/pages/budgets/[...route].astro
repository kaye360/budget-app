---
import Layout from "../../layouts/Layout.astro";
import Budget from "../../components/_budgets/Budget.astro"
import { getAllBudgetTotalSpent, getBudgetsWithTotalSpent } from "../../utils/budget.utils";
import { fetchData } from "../../lib/fetch";
import type { GetBudgets, MonthlyTransactions } from "../../types/types";
import { convertDate } from "../../lib/convertDate";
import Button from "../../components/Button/Button.astro";
import { ChartPieIcon, CirclePlusIcon } from "@lucide/astro";
import Modal from "../../components/Modal.astro";
import LoadingButton from "../../components/Button/LoadingButton.astro";

const auth = await Astro.session?.get('auth')

if( !auth ) {
    return Astro.redirect('/')
}

const { route } = Astro.params;

const month = route ? route : convertDate().to('YYYY-MM')

const [transactions, budgets] = await Promise.all([
	fetchData<MonthlyTransactions>(`/api/transactions/month/${month}`),
	fetchData<GetBudgets>('/api/budgets'),
])

const budgetsWithTotals = getBudgetsWithTotalSpent(
	budgets.response?.data, transactions.response?.data
)

const allBudgetTotals = getAllBudgetTotalSpent(budgetsWithTotals)
---
<Layout>

	<div class="flex items-center justify-between mb-4">

		<h1 class="text-lg md:text-xl font-semibold font-theme min-w-max">
			{ convertDate(month).to('MMMM-YYYY') }
		</h1>

		<select 
			id="month-selector"
			name="month-selector" 
			class="w-fit"
			data-month={month}
		>
			<option>Select month to view</option>
			{ transactions.response?.months.map( month => (
				<option value={month.month}>
					{month.title}
				</option>
			))}
		</select>
		
	</div>

	<div>
		<Budget
			budget={{
				totalSpent : allBudgetTotals.totalSpent,
				percentSpent : allBudgetTotals.percentSpent,
				amount : allBudgetTotals.totalAmount,
				id : 1,
				name : `${ convertDate(month).to('MMMM-YYYY') } Total `,
				userId : 1
			}}
			isTotal
		/>
		<div class="my-6 border-b border-slate-300"/>
	</div>

	<budget-list class="grid gap-6 text-lg transition-all translate-x-24 opacity-0 w-full">
		{ budgetsWithTotals.map( budget => (
			<Budget {budget} />
		))}
	</budget-list>

	<template id="budget-template">
		<Budget 
			budget={{
				amount : 0,
				id : 0,
				name : '',
				userId : auth.userId,
				totalSpent : 0,
				percentSpent : 0
			}}
		/>
	</template>

	<budget-create class="block my-8">
		<Button variant="outline" Icon={CirclePlusIcon} class="w-full md:w-[300px]">
			Add a Budget
		</Button>
		<Modal title="Add a budget">
			<form 
				id="add-budget-form"
				class="grid gap-4" 
				autocomplete="off"
			>
				<label>
					Name: <br />
					<input type="text" name="name" required />
				</label>
				<label>
					Amount per month: <br />
					<input type="number" name="amount" required />
				</label>
				<LoadingButton 
					type="submit" 
					variant="fill" 
					class="w-full"
					Icon={ChartPieIcon}
					state={{
						initial : 'Add Budget',
						loading : 'Adding...',
						error : 'Something went wrong',
						success : 'Budget Added!'
					}}
				/>
			</div>
		</Modal>
	</budget-create>
</Layout>

<script>
import { el } from "../../lib/el"
import { fetchData } from "../../lib/fetch"
import { sleep } from "../../utils/app.utils"

// if( import.meta.env.DEV ) {
// 	document.addEventListener('DOMContentLoaded', () => {
// 		setTimeout( () => {
// 			const dialog = document.querySelectorAll('dialog')
// 			dialog[0]?.showModal()
// 		}, 1000)
// 	})
// }

document.addEventListener('DOMContentLoaded', () => {

	const createButton = el<HTMLButtonElement>('budget-create button', this)
	const dialog = el<HTMLDialogElement>('budget-create dialog', this)
	
	if( createButton && dialog ) {
		createButton.addEventListener('click', () => dialog.showModal() )
	}

	el<HTMLFormElement>('#add-budget-form', document, form => {
		form.addEventListener('submit', async (e: Event) => {

			e.preventDefault()

			const button = el<HTMLButtonElement>('loading-button', form)
			
			button?.setAttribute('state', 'loading')

			const formData = new FormData(form)
			const budget = {
				name : formData.get('name'),
				amount : Number(formData.get('amount'))
			}

			const response = await fetchData<{data : { name : string, id : number }}>(`/api/budgets/`, {
				method : 'POST',
				body: budget 
			})

			if( response.error ) {
				button?.setAttribute('state', 'error')
				return 
			}

			button?.setAttribute('state', 'success')
			await sleep(1000)
			dialog?.close()

			const budgetList = el('budget-list')
			const template = el<HTMLTemplateElement>('#budget-template')
			const fragment = template?.content.cloneNode(true)

			const div = el('div', fragment)

			if(!div) {
				console.warn('Invalid Budget template')
				return
			}

			el<HTMLAnchorElement>('a', fragment, link => {
				link.textContent = response.response?.data.name || ''
				link.setAttribute('href', `/transactions/budget/${response.response?.data.id}`)
				console.log(link)
			})
			
			budgetList?.append(div)
			
		})
	})



	// Animate in
	el('budget-list', document, el => el.classList.remove('translate-x-24', 'opacity-0'))

	el<HTMLSelectElement>('#month-selector', document, select => {
		select.addEventListener('change', e => {

			if( !(e.target instanceof HTMLSelectElement) ) {
				return
			}

			if( e.target.dataset.month === e.target.value ) {
				return
			}

			// Animate out
			el('budget-list', document, el => el.classList.add('-translate-x-24', 'opacity-0'))

			window.location.href = `/budgets/${e.target.value}`
		})
	})

})
</script>