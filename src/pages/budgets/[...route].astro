---
import Layout from "../../layouts/Layout.astro";
import Budget from "../../components/_budgets/Budget.astro"
import { getBudgetsWithTotalSpent } from "../../utils/budget.utils";
import { convertDate } from "../../lib/convertDate";
import CreateBudget from "../../components/_budgets/CreateBudget.astro";
import SelectMonthlyBudget from "../../components/_budgets/SelectMonthlyBudget.astro";
import MonthlySpendingSummary from "../../components/_summaries/MonthlySpendingSummary.astro";
import { actions } from "astro:actions";

const auth = await Astro.session?.get('auth')
if( !auth ) return Astro.redirect('/') 

const { route } = Astro.params;

const month = route ? route : convertDate().to('YYYY-MM')

const [transactions, budgets] = await Promise.all([
	Astro.callAction( actions.transaction.index, { filter : 'month', filterValue : month } ),
	Astro.callAction( actions.budget.index, {} )
])

const budgetsWithTotalSpent = getBudgetsWithTotalSpent(budgets.data, transactions.data.list)

---
<Layout>

	<div class="flex items-center justify-between mb-4">

		<h1 class="text-lg md:text-xl font-semibold font-theme min-w-max">
			{ convertDate(month).to('MMMM-YYYY') }
		</h1>

		<SelectMonthlyBudget currentMonth={month} months={transactions.data.months} /> 
		
	</div>

	<MonthlySpendingSummary {month} />

	<section-divider class="block my-6 border-b border-slate-300 animate-progress-bar" />

	<budget-list class="grid gap-6 text-lg w-full">
		{ budgetsWithTotalSpent.map( budget => (
			<Budget {budget} />
		))}
	</budget-list>

	<template id="budget-template">
		<Budget 
			budget={{
				amount : 0,
				id : 0,
				name : '',
				userId : auth.userId,
				totalSpent : 0,
				percentSpent : 0
			}}
		/>
	</template>

	<CreateBudget />

</Layout>
