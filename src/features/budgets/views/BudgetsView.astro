---
import { actions } from "astro:actions";
import { convertDate } from "../../../lib/convertDate";
import MonthlySpendingSummary from "../../trends/components/MonthlySpendingSummary.astro";
import { getBudgetsWithTotalSpent } from "../budget.utils";
import Budget from "../components/Budget.astro";
import CreateBudget from "../components/CreateBudget.astro";
import SelectMonthlyBudget from "../components/SelectMonthlyBudget.astro";
import AppLayout from "../../../layouts/AppLayout.astro";
import { getAuth } from "../../auth/auth.utils"

const auth = await getAuth(Astro)
const { route } = Astro.params;

const month = route ? route : convertDate().to('YYYY-MM')

const [transactions, budgets] = await Promise.all([
	Astro.callAction( actions.transaction.index, { filter : 'month', filterValue : month } ),
	Astro.callAction( actions.budget.index, {} )
])

const budgetsWithTotalSpent = getBudgetsWithTotalSpent(budgets.data, transactions.data.list)

---
<AppLayout>

	<div class="flex items-center justify-between mb-4">

		<h1 class="text-lg md:text-xl font-semibold font-theme min-w-max">
			{ convertDate(month).to('MMMM-YYYY') }
		</h1>

		<SelectMonthlyBudget currentMonth={month} months={transactions.data.months} /> 
		
	</div>

	<MonthlySpendingSummary {month} />

	<section-divider class="block my-6 border-b border-slate-300 animate-progress-bar" />

	<budget-list class="grid gap-6 text-lg w-full">
		{ budgetsWithTotalSpent.map( budget => (
			<Budget {budget} />
		))}
	</budget-list>

	<template id="budget-template">
		<Budget 
			budget={{
				amount : 0,
				id : 0,
				name : '',
				userId : auth.userId,
				totalSpent : 0,
				percentSpent : 0
			}}
		/>
	</template>

	<CreateBudget />

</Layout>
