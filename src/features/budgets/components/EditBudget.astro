---
import { ChartPieIcon } from "@lucide/astro";
import type { Budget } from "../../../types/types";
import LoadingButton from "../../../components/Button/LoadingButton.astro";

interface Props {
    budget : Budget
}

const { budget } = Astro.props
---

<budget-edit class="block mb-12">
    <form 
        class="grid gap-4 font-normal" 
        autocomplete="off"
        method="POST"
        data-budgetid={budget.id}
    >
        <label>
            Name: <br />
            <input type="text" name="name" value={budget.name} required />
        </label>
        <label>
            Amount per month: <br />
            <input type="number" name="amount" value={budget.amount} required />
        </label>
        <LoadingButton 
            type="submit" 
            variant="fill" 
            class="w-full"
            Icon={ChartPieIcon}
            state={{
                initial : 'Update Budget',
                loading : 'Updating...',
                error : 'Something went wrong',
                success : 'Budget Updated!'
            }}
        />
    </form>
</budget-edit>


<script>
import { actions } from "astro:actions"
import { el } from "../../../lib/el"


class BudgetEdit extends HTMLElement {
    
    /**
     * 
     * Edits a Budget and updates DOM
     * 
     */
    connectedCallback() {

        /**
         * Form submit handler
         */
        el<HTMLFormElement>('form', this, form => {
            form.addEventListener('submit', async (e: Event) => {
        
                e.preventDefault()
                
                if( !(form instanceof HTMLFormElement) ) return 
                
                const button = el<HTMLButtonElement>('loading-button', this)
                button?.setAttribute('state', 'loading')

                const formData = new FormData(form)
                const name = String( formData.get('name') )
                const amount = Number( formData.get('amount') )
                const id = Number( form.dataset.budgetid )

                const response = await actions.budget.update({name, amount, id})

                if( response.error ) {
                    button?.setAttribute('state', 'error')
                    return 
                }
                
                const budget = this.closest('budget-item')
                const prevState = JSON.parse( String( budget?.getAttribute('state') ) )

                budget?.setAttribute('state', JSON.stringify({
                    ...prevState, name, amount
                }))

                button?.setAttribute('state', 'success')
            })
        })
    }
}

customElements.define('budget-edit', BudgetEdit)

</script>