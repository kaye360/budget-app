---
import { CirclePlusIcon, ChartPieIcon } from "@lucide/astro";
import Button from "../../../components/Button/Button.astro";
import Modal from "../../../components/Modal.astro";
import LoadingButton from "../../../components/Button/LoadingButton.astro";
---
<budget-create class="block my-8">
    <Button variant="outline" Icon={CirclePlusIcon} class="w-full md:w-[300px]">
        Add a Budget
    </Button>
    <Modal title="Add a budget">
        <form 
            id="add-budget-form"
            class="grid gap-4" 
            autocomplete="off"
            method="POST"
        >
            <label>
                Name: <br />
                <input type="text" name="name" required />
            </label>
            <label>
                Amount per month: <br />
                <input type="number" name="amount" required />
            </label>
            <LoadingButton 
                type="submit" 
                variant="fill" 
                class="w-full"
                Icon={ChartPieIcon}
                state={{
                    initial : 'Add Budget',
                    loading : 'Adding...',
                    error : 'Something went wrong',
                    success : 'Budget Added!'
                }}
            />
        </form>
    </Modal>
</budget-create>


<script>

import { actions } from "astro:actions"
import { el } from "../../../lib/el"
import { sleep } from "../../app/app.utils"
import { LoadingButton } from "../../../components/Button/LoadingButton"
import { getFormData } from "../../app/form.utils"

const createButton = el<HTMLButtonElement>('budget-create button', this)
const dialog = el<HTMLDialogElement>('budget-create dialog', this)

if( createButton && dialog ) {
    createButton.addEventListener('click', () => dialog.showModal() )
}

el<HTMLFormElement>('#add-budget-form', document, form => {

    const button = new LoadingButton('loading-button', {context : form} )

    form.addEventListener('submit', async (e: Event) => {

        e.preventDefault()

        button.setState('loading')

        const { name, amount } = getFormData(form)

        if( typeof name !== 'string' || typeof amount !== 'string' ) {
            throw new Error('Invalid name or amount type')
        }

        const response = await actions.budget.store({ name, amount })

        if( response.error ) {
            button.setState('error')
        }

        button?.setState('success')
        await sleep(1000)
        dialog?.close()

        const budgetList = el('budget-list')
        const template = el<HTMLTemplateElement>('#budget-template')
        const fragment = template?.content.cloneNode(true)

        const budgetItem = el('budget-item', fragment)

        if(!budgetItem) {
            throw new Error('Invalid Budget template')
        }


        if( !response.data ) {
            return
        }
        
        const state = {
            name : response.data[0].name,
            amount : response.data[0].amount,
            id : response.data[0].id,
            totalSpent : 0
        }

        budgetItem.setAttribute('state', JSON.stringify(state))
        budgetList?.append(budgetItem)
    })
})

</script>