---
import { ImportIcon } from "@lucide/astro";
import LoadingButton from "../../../components/Button/LoadingButton.astro";
import ImportTransactionsDroppable from "../components/ImportTransactionsDroppable.astro";
import TransactionListLayout from "../../../layouts/TransactionListLayout.astro";
---

<TransactionListLayout title="Import Transactions">

    <ImportTransactionsDroppable />

    <form
        id="import-transactions-form"
        class="grid gap-2"
        method="POST"
    >
        Imported Transactions
        <textarea 
            name="transactions" 
        />

        <label class="lg:max-w-1/2">
            Bank Account:
            <select name="account">
                <option value="1">Everyday</option>
                <option value="2">Line of Credit</option>
                <option value="3">RBC Visa</option>
                <option value="4">CIBC Mastercard</option>
                <option value="5">Bills</option>
            </select>
        </label>

        <LoadingButton 
            state={{
                initial : 'Import Transactions',
                loading : 'Importing...',
                error : 'Import Failed',
                success : 'Transactions Imported'
            }}
            Icon={ImportIcon}
            variant="fill"
            class="w-full lg:max-w-1/2"
            type="submit"
        />
    </form>

</TransactionListLayout>

<script>
import { actions } from "astro:actions";
import { el } from "../../../lib/el";
import { getFormData } from "../../app/form.utils";
import { getAccountCsvPattern, transformCsvRowsToTransactions, transformCsvToArray } from "../utils/importTransactions";
import { sleep } from "../../app/app.utils";
import { LoadingButton } from "../../../components/Button/LoadingButton";

el<HTMLFormElement>('#import-transactions-form', document, form => {
    form.addEventListener('submit', async (e: Event) => {
        e.preventDefault()

        const loadingButton = new LoadingButton('loading-button')
        loadingButton.setState('loading')

        const { 
            transactions: transactionsCsv, 
            account : accountId 
        } = getFormData(form)

        if( typeof accountId !== 'string' || typeof transactionsCsv !== 'string' ) {
            throw new Error('Invalid account or transactionsCsv type')
        }

        try {
            const accountCsvPattern = getAccountCsvPattern(accountId)
            const csvRows = transformCsvToArray(transactionsCsv)
            const transactions = transformCsvRowsToTransactions(csvRows, accountCsvPattern, accountId)
            const { error } = await actions.transaction.store(transactions)
            if( error ) {
                throw new Error(error.message)
            }
            loadingButton.setState('success')
        } catch( e ) {
            loadingButton.setState('error')
            await sleep(3000)
            loadingButton.setState('initial')
        }
    })
})

</script>