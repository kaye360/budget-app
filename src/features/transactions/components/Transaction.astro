---
import { ArchiveRestoreIcon, EllipsisIcon } from "@lucide/astro"
import DeleteTransaction from "./DeleteTransaction.astro"
import EditTransaction from "./EditTransaction.astro"
import type { Budget, Transaction } from "../../../types/types"
import RestoreTransaction from "./RestoreTransaction.astro"
import Modal from "../../../components/Modal.astro"

interface Props {
    transaction? : Transaction,
    budgets? : Budget[],
    mode? : 'simple' | 'detailed' | 'restore'
}

const { 
    transaction,
    budgets,
    mode = 'detailed'
} = Astro.props
---

<transaction-item 
    class="relative flex flex-wrap md:flex-nowrap items-center gap-2 px-2 py-4 rounded-md max-h-[500px]"
    state={JSON.stringify(transaction)}
>

    <transaction-date  
        class="text-sm text-accent-text min-w-fit" 
        data-bind="dateHumanReadable"
    />

    <transaction-description 
        class="block font-semibold text-xl md:text-xl rounded w-full md:w-auto" 
        data-bind="description"
    />

    
    { mode === 'detailed' &&
        <transaction-budget
            class="bg-blue/20 px-2 py-1 text-xs font-medium rounded-sm tracking-wide capitalize flex items-center min-w-fit order-10 md:order-none" 
            data-bind="budget"
        />
        <span class="bg-red/10 px-2 py-1 font-medium rounded-sm tracking-wide text-xs capitalize flex items-center gap-1 min-w-fit order-11 md:order-none">
            <transaction-account-name data-bind="accountName" />
            &#9679;
            <transaction-account-type data-bind="accountType" />
            <span>
                (<transaction-account-number data-bind="accountNumber" />)
            </span>
        </span>
    }

    <transaction-amount  
        class="ml-auto text-xl font-semibold font-theme w-full md:w-auto" 
        data-bind="amountCurrency"
    />


    { mode === 'detailed' &&
        <transaction-edit class="order-last ml-auto md:ml-0">
            <button class="ml-2 group cursor-pointer transition-all active:scale-95">
                <EllipsisIcon class="stroke-slate-400 group-hover:stroke-slate-900 transition-colors" />
            </button>
        </transaction-edit>
        <Modal title="Transaction Options">
            <EditTransaction transaction={transaction} budgets={budgets || []} />
            <DeleteTransaction />
        </Modal>
    }

    { mode === 'restore' && (
        <transaction-restore-modal-button class="order-last ml-auto md:ml-0">
            <button class="ml-2 group cursor-pointer transition-all active:scale-95">
                <ArchiveRestoreIcon class="stroke-slate-400 group-hover:stroke-slate-900 transition-colors" />
            </button>
        </transaction-restore-modal-button>
        <Modal title="Restore Transaction">
            <RestoreTransaction />
        </Modal>
    )}

</transaction-item>


<script>
import { convertDate } from "../../../lib/convertDate"
import { el, els } from "../../../lib/el"
import type { Transaction } from "../../../types/types"
import { toCurrency } from "../../app/app.utils"


class TransactionItem extends HTMLElement {
    
    /**
     * Add any event listeners :
     * - Show Edit Modal
     * - Show Restore Modal
     */
    connectedCallback() {
        const editButton = el<HTMLButtonElement>('transaction-edit button', this)
        const restoreButton = el<HTMLButtonElement>('transaction-restore-modal-button button', this)
        const dialog = el<HTMLDialogElement>('dialog', this)
        
        if( editButton && dialog ) {
            editButton.addEventListener('click', () => dialog.showModal() )
        }

        if( restoreButton && dialog ) {
            restoreButton.addEventListener('click', () => dialog.showModal() )
        }
    }

    /**
     * Transaction attribute state and handlers
     */
    static observedAttributes = ['state']

    attributeChangedCallback(attr: string, _oldValue: any, newValue: string) {

        if( attr !== 'state') {
            return
        }

        const transactionState: Transaction = JSON.parse(newValue)
        const computedTransactionState = this.getComputedTransactionValues(transactionState)

        // Bind new values to DOM elements
        els('[data-bind]', this, el => {
            const key = el.getAttribute('data-bind') as keyof typeof computedTransactionState
            const value =  computedTransactionState[key] ?? ''

            if( 'value' in el) el.value = String(value)
            if( 'textContent' in el ) el.textContent = String(value)
        })
    }

    /**
     * @method getComputedTransactionValues
     * 
     * Takes a Transaction object and returns the same object
     * with extra values that need to be calculated.
     */
    getComputedTransactionValues( transaction: Transaction) {
        return {
            ...transaction,
            date: convertDate(transaction.date).to('YYYY-MM-DD'),
            dateHumanReadable: convertDate(transaction.date).to('MMM-DD-YYYY'),
            amountCurrency: toCurrency(transaction.amount),
            accountName: 'Everyday',
            accountType: 'Chequing',
            accountNumber: '8495'
        }
    }
}

customElements.define('transaction-item', TransactionItem)

// if( import.meta.env.DEV ) {
//     document.addEventListener('DOMContentLoaded', () => {
//         setTimeout( () => {
//             const dialog = document.querySelectorAll('dialog')
//             dialog[1]?.showModal()
//         }, 1000)
//     })
// }
</script>

