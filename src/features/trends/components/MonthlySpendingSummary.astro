---
import { convertDate } from '../../../lib/convertDate'

interface Props {
    month? : string
}

const { 
    month = convertDate().to('YYYY-MM')
} = Astro.props

---

<monthly-spending-summary month={month}>
    <budget-total class="relative rounded-sm flex items-center justify-between px-4 py-2 font-semibold !bg-white/50">
        <span>
            {convertDate(month).to('MMMM-YYYY')} Total Spending
        </span>

        <monthly-spending-total class="text-2xl" />

        <span 
            class:list={[
                "absolute left-0 top-0 bottom-0 -z-10 rounded-sm block origin-bottom-left bg-slate-300 border border-slate-400",
                'progress-bar animate-progress-bar',
            ]}
        />
    </budget-total>

</monthly-spending-summary>


<script>
import { actions } from "astro:actions";
import { el, } from "../../../lib/el";


class MonthlySpendingSummary extends HTMLElement {

    private budgetList : HTMLElement | null = null
    private month : string | null = null

    async connectedCallback() {
        this.budgetList = el('#budget-list')
        this.month = this.getAttribute('month')

        /**
         * Observe changes to budgetList if it exists as we want to update the total of all budgets if 1 is changed. If no budgetList, then just render the component without and observer
         */
        if( this.budgetList ) {
            this.observeBudgetList()
        }

        this.updateSpendingSummary()
    }

    /**
     * Budget-List mutation observer
     */
    observeBudgetList() {

        const observer = new MutationObserver( async () => {
            this.updateSpendingSummary()            
        })
        
        observer.observe( this.budgetList as Node, {
            childList : true,
            attributes : false,
            subtree : true,
        })
    }

    /**
     * Fetch and Render monthly spending data
     */
    async updateSpendingSummary() {
        const response = await actions.summary.getMonthlySpending({date : this.month})

        if( !response.data ) {
            return
        }

        el('monthly-spending-total', this, el => {
            el.textContent = String(`${response.data.spent} / ${response.data.budgets}`)
        })

        el<HTMLSpanElement>('span.progress-bar', this, el => {
            const percent = Math.min(
                Math.round( response.data.spent / response.data.budgets * 100 ),
                100
            )
            el.style.width = `${percent}%` 
        })
    }
}

customElements.define('monthly-spending-summary', MonthlySpendingSummary)

</script>