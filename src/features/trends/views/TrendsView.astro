---
import { actions } from "astro:actions"
import H1 from "../../../components/H1.astro"
import AppLayout from "../../../layouts/AppLayout.astro"
import type { Transaction } from "../../../types/types"
import { convertDate } from "../../../lib/convertDate"

const [transactions, budgets] = await Promise.all([
    Astro.callAction(actions.transaction.index, { filter: "all" }),
    Astro.callAction(actions.budget.index, {}),
])

// console.log(transactions.data.list)

function calcMonthlyTotals(transactions: Transaction[]) {

    const totals: Record<
        string,
        {
            spending: number
            income: number
            net: number
        }
    > = {}

    transactions.forEach((transaction: Transaction) => {
        if (!transaction.amount) return

        const month = convertDate(transaction.date).to("YYYY-MM")
        const amount = Math.round(Number(transaction.amount))
        const absAmount = Math.abs(amount)

        if (!(month in totals)) {
            totals[month] = {
                spending: 0,
                income: 0,
                net: 0,
            }
        }

        if (amount > 0) {
            totals[month].income += absAmount
        }
        if (amount < 0) {
            totals[month].spending += absAmount
        }
        totals[month].net += amount
    })

    const totalsArray = Object.entries(totals)
        .map(([month, { spending, income, net }]) => ({
            month,
            spending,
            income,
            net,
        }))
        .sort((a, b) => (a.month < b.month ? 1 : -1))

    return { totalsArray, totals }
}

function calcUpperRange(totals: number[]) {
    const highestSpending = String(Math.max(...totals.map((t) => Math.abs(t))))
    const leadingDigits = Number(highestSpending.slice(0, 2)) + 1
    const zeros = "0".repeat(highestSpending.length - 2)
    return Number(leadingDigits + zeros)
}

function calcMonthRange(start: string, end: string) {
    const range = []
    const [startYear, startMonth] = start.split("-").map(Number)
    const [endYear, endMonth] = end.split("-").map(Number)

    let year = startYear
    let month = startMonth

    while (year < endYear || (year === endYear && month <= endMonth)) {
        const formatted = `${year}-${String(month).padStart(2, "0")}`
        range.push(formatted)

        month++
        if (month > 12) {
            month = 1
            year++
        }
    }

    return range
}

const { totals, totalsArray } = calcMonthlyTotals(transactions.data.list)
console.log(totals)
const spendingUpperRange = calcUpperRange(totalsArray.map((t) => t.spending))
const incomeUpperRange = calcUpperRange(totalsArray.map((t) => t.income))
const netUpperRange = calcUpperRange(totalsArray.map((t) => t.net))
const startMonth = totalsArray.map((t) => t.month).sort().at(0) as string
const endMonth = totalsArray.map((t) => t.month).sort().at(-1) as string
const range = calcMonthRange(startMonth, endMonth)

---

<AppLayout>
    <H1> Trends </H1>

    <div class="grid gap-2 mt-12 p-4 bg-gradient-to-tr from-red/5 to-transparent/20 rounded-xl">
        <h2 class="text-xl font-semibold">
            Spending over time
        </h2>

        <div class="flex gap-2 items-end h-[300px] overflow-x-auto ">
            { range.map((month) => (
                <div class="flex flex-col items-center w-[70px]">
                    <span>-{ totals[month]?.spending ?? 0 }</span>
                    <div
                        class="bg-gradient-to-t from-red/30 to-red/20 w-[40px] border-b-2 border-red rounded-t"
                        style={`
                            height : ${ totals[month]?.spending ?? 0 / spendingUpperRange * 225}px;
                        `}
                    />
                    <span class="text-sm font-semibold">{convertDate(month).to("MMM-YYYY")}</span>
                </div>
            ))}
        </div>
    </div>

    <div class="grid gap-2 mt-12">
        <h2 class="text-xl font-semibold">
            Income over time
        </h2>

        <div class="flex gap-2 items-end h-[300px] overflow-x-auto">
            { range.map((month) => (
                <div class="flex flex-col items-center w-[70px]">
                    <span>+{ totals[month]?.income ?? 0 }</span>
                    <div
                        class="bg-gradient-to-t from-green/40 to-green/20 w-[40px] border-b-2 border-green rounded-t"
                        style={`
                            height : ${ totals[month]?.income ?? 0 / incomeUpperRange * 225}px;
                        `}
                    />
                    <span class="text-sm font-semibold">{convertDate(month).to("MMM-YYYY")}</span>
                </div>
            ))}
        </div>
    </div>

    <div class="grid gap-2 mt-12">
        <h2 class="text-xl font-semibold">
            Net over time
        </h2>

        <div class="flex gap-2 items-stretch h-[450px] overflow-x-auto ">
            { range.map((month) => (
                <div class="relative h-full flex items-center hover:bg-blue/5">
                    <div class:list={[
                        "flex flex-col items-center w-[70px] ",
                        totals[month]?.net > 0 && "-translate-y-1/2",
                        totals[month]?.net < 0 && "translate-y-1/2",
                    ]}>
                        { totals[month]?.net > 0 && (
                            <span>+{ totals[month]?.net }</span>
                        )}
                        <div
                            class:list={[
                                "bg-gradient-to-t w-[40px] rounded-t",
                                totals[month]?.net > 0 && "from-green/40 to-green/20 border-b-2  border-green",
                                totals[month]?.net < 0 && "from-red/30 to-red/20 border-t-2  border-red",
                            ]}
                            style={`
                                height : ${ Math.abs(totals[month]?.net / netUpperRange * 150) }px;
                            `}
                        />
                        { totals[month]?.net < 0 && (
                            <span>{totals[month]?.net}</span>
                        )}
                    </div>
                    <span class="absolute bottom-0 text-sm font-semibold">{convertDate(month).to("MMM-YYYY")}</span>
                </div>
            ))}
        </div>
    </div>

    <div class="grid gap-2 mt-6">
        <h2 class="text-xl font-semibold">Budgets over time</h2>
    </div>
</AppLayout>
