---
import { Trash2Icon } from "@lucide/astro";
import LoadingButton from "../Button/LoadingButton.astro";
---

<transaction-delete>
    <div class="grid gap-4 justify-start border-l border-blue pl-4">
        <h3 class="text-lg font-semibold tracking-wide">Delete this action?</h3>
        <p>
            <strong>Note:</strong> This action can be undone.
        </p>
        <LoadingButton 
            state={{ initial : "Delete Transaction", loading : 'Deleting...', error : 'Failed to delete', success : 'Deleted!'}}
            variant="destruct" 
            Icon={Trash2Icon} 
            class="w-full"
        >
            Delete Transaction
        </LoadingButton>
    </div>
</transaction-delete>

<script>
import { el } from "../../lib/el"
import { fetchData } from "../../lib/fetch"
import { sleep } from "../../utils/app.utils"


class TransactionDelete extends HTMLElement {
    
    /**
     * 
     * Deletes a transaction and removes it from the list of transactions
     * in the DOM
     * 
     */
    connectedCallback() {
        el<HTMLFormElement>('button', this, button => {
            button.addEventListener('click', async () => {
                
                const transaction = this.closest('transaction-item')
                const loadingButton = el<HTMLButtonElement>('loading-button', this )
                
                if( !transaction || !loadingButton ) {
                    console.warn('Invalid transaction or loadingButton')
                    return
                }

                // Button wrapper custom element
                loadingButton.setAttribute('state', 'loading')

                const result = await fetchData(`/api/transactions/${transaction.id}`, {
                    method : 'DELETE',
                })

                if( result.error ) {
                    loadingButton.setAttribute('state', 'error')
                    return 
                }
                
                loadingButton.setAttribute('state', 'success')
                this.removeTransactionFromDom(transaction)
                this.closest('dialog')?.close()

                await sleep(500)
                transaction.setAttribute('isdeleted', "true")
                transaction.setAttribute('data-isdeleted', "true")
            })
        })
    }


    removeTransactionFromDom( transaction: Element | null ) {
        transaction?.classList.add('scale-0', '!max-h-0', 'duration-500', 'origin-top', 'opacity-0')
    }
}

customElements.define('transaction-delete', TransactionDelete)

</script>