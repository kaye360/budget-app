---
import { EllipsisVerticalIcon } from "@lucide/astro"
import DeleteTransaction from "./DeleteTransaction.astro"
import EditTransaction from "./EditTransaction.astro"
import type { Budget, Transaction } from "../../types/types"
import Modal from "../Modal.astro"

interface Props {
    transaction? : Transaction,
    budgets? : Budget[],
    mode? : 'simple' | 'detailed'
}

const { 
    transaction,
    budgets,
    mode = 'detailed'
}= Astro.props
---

<transaction-item 
    data-isdeleted={transaction?.isDeleted}
    class="relative flex flex-wrap items-center py-8 border-b border-red/20 data-[isdeleted=true]:opacity-90 transition-all max-h-[500px]"
    {...transaction}
>

    <div>

        <transaction-date  
            class="block text-sm text-accent-text mb-1 border border-transparent rounded" 
        />

        <transaction-description 
            class="block font-semibold text-2xl md:text-xl mb-2 border border-transparent data-[iseditable=true]:hover:border-slate-300 rounded" 
        />

    </div>

    <transaction-amount  
        class="ml-auto text-2xl font-semibold font-theme border border-transparent data-[iseditable=true]:hover:border-slate-300 rounded" 
    />

    { mode === 'detailed' && 
        <transaction-edit>
            <button class="p-2 ml-2 border border-red/30 group hover:border-slate-500 rounded-sm cursor-pointer transition-colors active:scale-95">
                <EllipsisVerticalIcon class="stroke-slate-400 group-hover:stroke-slate-500 transition-colors" />
            </button>
        </transaction-edit>
        <Modal title="Transaction Options">
            <EditTransaction transaction={transaction} budgets={budgets || []} />
            <DeleteTransaction />
        </Modal>
    }

    <div class="w-full">
        <transaction-budget
            class="bg-gradient-to-r from-blue/30 to-green/30  inline-block px-3 py-1 text-xs font-medium rounded-sm tracking-wide capitalize mr-2" 
        />

        { mode === 'detailed' &&
            <span class="bg-gradient-to-r from-red/30 to-orange/30 inline-block px-3 py-1 font-medium rounded-sm tracking-wide text-xs capitalize ">
                Everyday &#9679; Chequing 9084
                <transaction-account-name />
                
                <transaction-account-type />
                <transaction-account-number />
            </span>
        }
    </div>

</transaction-item>


<script>
import { convertDate } from "../../lib/convertDate"
import { el } from "../../lib/el"
import { toCurrency } from "../../utils/app.utils"


class TransactionItem extends HTMLElement {
    
    /**
     * 
     * Add showModal event listener to edit Button
     * 
     */
    connectedCallback() {
        const editButton = el<HTMLButtonElement>('transaction-edit button', this)
        const dialog = el<HTMLDialogElement>('dialog', this)
        
        if( editButton && dialog ) {
            editButton.addEventListener('click', () => dialog.showModal() )
        }
    }

    /**
     * 
     * Transaction attribute state and handlers
     * 
     */
    static observedAttributes = [
        'date', 
        'description', 
        'budget', 
        'budgetid',
        'amount', 
        'accountname', 
        'accounttype', 
        'accountnumber', 
        'isdeleted',
    ]

    attributeChangedCallback(name: string, _: any, newValue:string) {

        const handlers: Record<string, () => void> = {
            date : () => {
                el('transaction-date', this, el => el.textContent = convertDate(newValue).to('MMM-DD-YYYY') )
                el<HTMLInputElement>('input[name=date]', this, el => el.value = newValue)
            },
            description : () => {
                el('transaction-description', this, el => el.textContent = newValue )
                el<HTMLInputElement>( 'input[name=description]', this, el => el.value = newValue ) 
            },
            budget : () => {
                el('transaction-budget', this, el => el.textContent = newValue )
            },
            budgetid : () => {
                el<HTMLInputElement>('select[name="budget-id"]', this, el => el.value = newValue )
            },
            amount : () => {
                el( 'transaction-amount', this, el => el.textContent = toCurrency(newValue) )
                el<HTMLInputElement>( 'input[name=amount]', this, el => 
                    el.value = toCurrency(newValue).replace('$', '') 
                )
            },
            accountname : () => {
                el('transaction-account-name', this, el => el.textContent = newValue )
            },
            accounttype : () => {
                el('transaction-account-type', this, el => el.textContent = newValue )
            },
            accountnumber : () => {
                el('transaction-account-number', this, el => el.textContent = newValue )
            },
        }
        if( handlers[name] ) {
            handlers[name]()
        }
    }
}

customElements.define('transaction-item', TransactionItem)

// if( import.meta.env.DEV ) {
//     document.addEventListener('astro:page-load', () => {
//         setTimeout( () => {
//             const dialog = document.querySelectorAll('dialog')
//             dialog[1]?.showModal()
//         }, 1000)
//     })
// }
</script>

