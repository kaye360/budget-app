---
import { convertDate } from '../../lib/convertDate'

interface Props {
    month? : string
}

const { 
    month = convertDate().to('YYYY-MM')
} = Astro.props

---

<monthly-spending-summary month={month}>
    <budget-total class="relative rounded-sm flex items-center justify-between px-4 py-2 font-semibold !bg-white/50">
        <span>
            {convertDate(month).to('MMMM-YYYY')} Total Spending
        </span>

        <monthly-spending-total class="text-2xl" />

        <span 
            class:list={[
                "absolute left-0 top-0 bottom-0 -z-10 rounded-sm block origin-bottom-left bg-slate-300 border border-slate-400",
                'progress-bar animate-progress-bar',
            ]}
        />
    </budget-total>

</monthly-spending-summary>


<script>
import { el, } from "../../lib/el";
import { fetchData } from "../../lib/fetch";
import type { MonthlySpendingSummaryAPIResponse } from "../../types/types";


class MonthlySpendingSummary extends HTMLElement {

    private budgetList : HTMLElement | null = null
    private month : string | null = null

    /**
     * If there is a list of budgets:
     * Observe budget-list with Mutation Observer and update spending
     * summary when DOM elements change
     * 
     * Else, just get the spending summary data directly and don't
     * worry about any DOM elements changing as we won't need to 
     * update the spending summary data
     */
    async connectedCallback() {
        this.budgetList = el('budget-list')
        this.month = this.getAttribute('month')

        this.budgetList
            ? this.observeBudgetList()
            : this.getAndRenderSpendingData()
    }

    /**
     * Budget-List mutation observer
     */
    observeBudgetList() {

        const observer = new MutationObserver( async () => {
            this.getAndRenderSpendingData()            
        })
        
        observer.observe( this.budgetList as Node, {
            childList : true,
            attributes : false,
            subtree : true,
        })
    }

    /**
     * Fetch and Render monthly spending data
     */
    async getAndRenderSpendingData() {
            const totals = await this.getMonthlySpendingSummary(this.month)
            
            if( totals?.response ) {
                this.renderSpendingData(totals.response)
            }
    }

    /**
     * Fetch Monthly Spending Summary data
     */
    async getMonthlySpendingSummary( month : string | null ) {

        const res = await fetchData<MonthlySpendingSummaryAPIResponse>(`/api/summaries/monthly-spending/${month}`)
            
        if( res.response?.spent && res.response?.budgets ) {
            return res
        }

        return null
    }

    /**
     * Render current component data
     */
    renderSpendingData( totals : MonthlySpendingSummaryAPIResponse ) {

        const percent = Math.min(
            Math.round( totals.spent / totals.budgets * 100 ),
            100
        )

        el('monthly-spending-total', this, el => el.textContent = String(`${totals.spent} / ${totals.budgets}`))
        el<HTMLSpanElement>('span.progress-bar', this, el => el.style.width = `${percent}%` )

    }

}

customElements.define('monthly-spending-summary', MonthlySpendingSummary)

</script>