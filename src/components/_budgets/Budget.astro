---
import { EllipsisVerticalIcon } from '@lucide/astro'
import type { Budget, BudgetWithTotals } from '../../types/types'
import Modal from '../Modal.astro'
import EditBudget from './EditBudget.astro'
import DeleteBudget from './DeleteBudget.astro'



interface Props {
    budget : BudgetWithTotals
    isTotal? : boolean
}

const { budget, isTotal = false } = Astro.props
---

<budget-item 
    state={JSON.stringify(budget)}
    class:list={[
        "relative rounded-sm flex items-center justify-between px-4 py-2 font-semibold",
        "nth-[5n+1]:bg-blue/10 [&:nth-child(5n+1)_span.progress-bar]:bg-blue/20",
        "nth-[5n+2]:bg-green/10 [&:nth-child(5n+2)_span.progress-bar]:bg-green/20",
        "nth-[5n+3]:bg-purple/10 [&:nth-child(5n+3)_span.progress-bar]:bg-purple/20",
        "nth-[5n+4]:bg-red/10 [&:nth-child(5n+4)_span.progress-bar]:bg-red/20",
        "nth-[5n]:bg-orange/10 [&:nth-child(5n)_span.progress-bar]:bg-orange/20",
        isTotal && '!bg-white/50'
    ]}
>
    <a href={`/transactions/budget/${budget.id}`} class="hover:underline">
        <budget-name />
    </a>

    <budget-edit class="flex items-center gap-4">
        <span class="text-2xl">
            <budget-totalspent /> / <budget-amount />
        </span>
        <button>
            <EllipsisVerticalIcon class="text-base-text/60 hover:text-red active:scale-90 cursor-pointer"/>
        </button>
        <Modal title="Edit Budget">
            <EditBudget {budget} />
            <DeleteBudget />
        </Modal>
    </budget-edit>

    <span 
        class:list={[
            "absolute left-0 top-0 bottom-0 -z-10 rounded-sm block animate-progress-bar origin-bottom-left",
            'progress-bar',
            isTotal && '!bg-slate-300'
        ]}
    />
</div>

<script>
import { el } from "../../lib/el";
import type { BudgetWithTotals } from "../../types/types";


class BudgetItem extends HTMLElement {

    /**
     * 
     * Add showModal event listener to edit Button
     * 
     */
    connectedCallback() {
        const editButton = el<HTMLButtonElement>('budget-edit button', this)
        const dialog = el<HTMLDialogElement>('dialog', this)
        
        if( editButton && dialog ) {
            editButton.addEventListener('click', () => dialog.showModal() )
        }
    }

    /**
     * 
     * Budget State
     * 
     */
    static observedAttributes = ["state"]

    attributeChangedCallback(name: string, _: any, newValue : string) {

        if( name !== 'state' ) {
            return
        }

        const budget = JSON.parse(newValue) as BudgetWithTotals

        /**
         * Budget Name
         */
        el('budget-name', this, el => el.textContent = budget.name)
        /**
         * Budget Total spent
         */
        el('budget-totalspent', this, el => el.textContent = budget.totalSpent.toString())
        /**
         * Budget Amount
         */
        el('budget-amount', this, el => el.textContent = budget.amount.toString())
        /**
         * Budget Percent
         */
        el<HTMLElement>('span.progress-bar', this, el => el.setAttribute('style', `width : ${budget.percentSpent}%` ))

    }
}

customElements.define('budget-item', BudgetItem)

</script>