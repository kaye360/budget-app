---
import Button from "./Button.astro";
import type { LoadingButtonValidState } from "./LoadingButton";
import type { ButtonProps } from "./type";

interface Props extends ButtonProps {
    state : {
        [key in LoadingButtonValidState] : string
    }
}

const { 
    state,
    Icon,
    variant,
    class : className = '',
    ...props
} = Astro.props

---

<loading-button
    state={'initial'}
>
    <Button {variant} {Icon} class={className} {...props} >
        <initial-state class="inline-block">{state.initial}</initial-state>
        <loading-state class="inline-block">{state.loading}</loading-state>
        <error-state class="inline-block">{state.error}</error-state>
        <success-state class="inline-block">{state.success}</success-state>       
    </Button>
</loading-button>

<script>
import { el } from "../../lib/el"
import { sleep } from "../../utils/app.utils"
import type { LoadingButtonValidState } from "./LoadingButton"

class LoadingButton extends HTMLElement {

    connectedCallback() {
        // Add wavy text animation to loading state
        el('loading-state', this, el => {
            el.innerHTML = this.createWavyText(el.textContent)
        })
    }

    static observedAttributes = ['state']

    async attributeChangedCallback(
        _: any, 
        prevState: LoadingButtonValidState, 
        newState : LoadingButtonValidState
    ) {

        // Check if newState is valid
        if( !this.validStates.includes(newState) ) {
            console.warn('invalid state', newState)
            return
        }

        // If no previous state then initialize
        if( !prevState) {
            this.buttonText.loading?.classList.add('!hidden')
            this.buttonText.error?.classList.add('!hidden')
            this.buttonText.success?.classList.add('!hidden')
        }

        
        // If is success or error, delay everything
        // This allows the loading state to be visible and not flash by
        if( newState === 'error' || newState === 'success' ) {
            await sleep(1000)
        }

        // Disable button if loading
        const button = el<HTMLButtonElement>('button', this)
        if( button ) {
            button.disabled = newState === 'loading'
        }

        // Slide existing text away immediately
        this.buttonText[prevState]?.classList.add('animate-clip-swipe-away')

        // Hide existing text and slide new text in after delay
        await sleep(300)
        this.buttonText[prevState]?.classList.remove('animate-clip-swipe-away')
        this.buttonText[prevState]?.classList.add('!hidden')
        this.buttonText[newState]?.classList.remove('!hidden')
        this.buttonText[newState]?.classList.add('animate-clip-swipe-in')
        
        // Remove remaining animation classes
        await sleep(300)
        this.buttonText[newState]?.classList.remove('animate-clip-swipe-in')

        // Success or error, reset to initial text
        if( newState === 'success' || newState === 'error' ) {
            await sleep(4000)
            this.setAttribute('state', 'initial')
        }
    }

    private validStates : LoadingButtonValidState[] = ['initial', 'loading', 'error', 'success']

    buttonText = {
        initial : el('initial-state', this),
        loading : el('loading-state', this),
        error : el('error-state', this),
        success : el('success-state', this),
    }

    createWavyText( text: string | null ) : string {

        if( !text ) { return '' }

        return text.split('').
            map( (letter, i) => `
                <span 
                    class="inline-block -mr-1 animate-wave"
                    style="animation-delay : ${i * 0.1}s"
                >
                    ${letter}
                </span>
            `)
            .join('')
            .replaceAll(',', '')
    }

}

customElements.define('loading-button', LoadingButton)

</script>